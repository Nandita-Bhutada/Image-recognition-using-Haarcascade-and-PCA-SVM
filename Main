import os
import cv2
import numpy as np
from sklearn.decomposition import PCA
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder

# To detect faces load a pre-trained HaarCascade classifier
face_cascade = cv2.CascadeClassifier('/Users/nanditabhutada/Downloads/SPID/opencv/haarcascades/haarcascade_frontalface_default.xml')

# Assign the names of sporrts personalities which refers to sub-folders
personalities = ["roger_federer", "virat_kohli", "maria_sharapova", "serena_williams", "lionel_messi"]

# Load and preprocess data
data = []
labels = []

for personality in personalities:
    images_path = f"/Users/nanditabhutada/Downloads/SPID/dataset/{personality}/"
    for filename in os.listdir(images_path):
        # Use opencv to read image in grayscale
        img = cv2.imread(os.path.join(images_path, filename), cv2.IMREAD_GRAYSCALE)

        # Perform face detection using pre-trained cascade classifier
        faces = face_cascade.detectMultiScale(img, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

        if len(faces) == 0:
            continue

        # Initializing the first detected face as region of interest
        x, y, w, h = faces[0]
        face_roi = img[y:y + h, x:x + w]

        # To match the training data size and flatten it, resize the face region
        resized_face_roi = cv2.resize(face_roi, (100, 100)).flatten()

        data.append(resized_face_roi)
        labels.append(personality)


data = np.array(data)
labels = np.array(labels)

# Use label encoder to convert string labels to numerical labels
label_encoder = LabelEncoder()
encoded_labels = label_encoder.fit_transform(labels)

# Data is split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data, encoded_labels, test_size=0.2, random_state=42)

# Use PCA for dimensionality reduction of data
pca = PCA(n_components=0.95) 
X_train_pca = pca.fit_transform(X_train)
X_test_pca = pca.transform(X_test)

# Create an Support Vector Machine (SVM) classifier for training data 
svm_classifier = SVC()
svm_classifier.fit(X_train_pca, y_train)

# Using trained SVM classifier on the test set for prediction
predictions = svm_classifier.predict(X_test_pca)
# Calculate and print the accuracy of the model on test set
accuracy = accuracy_score(y_test, predictions)
print(f"Accuracy: {accuracy}")

# Define a function to test a new image and predict the personality
def test_image(image_path):
    # Read and preprocess the test image
    test_img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

    # Perform face detection using pre-trained cascade classifier
    faces = face_cascade.detectMultiScale(test_img, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

    if len(faces) == 0:
        print("No faces detected in the image.")
        return

    # Initializing the first detected face as region of interest
    x, y, w, h = faces[0]
    face_roi = test_img[y:y + h, x:x + w]

    # To match the training data size and flatten it, resize the face region
    resized_face_roi = cv2.resize(face_roi, (100, 100)).flatten()

    # To test image, apply pca transformation
    test_img_pca = pca.transform([resized_face_roi])

    # Using trained SVM classifier for prediction
    predicted_label = svm_classifier.predict(test_img_pca)[0]

    # Decode the predicted numerical label for the corrosponding personality
    personality = label_encoder.inverse_transform([predicted_label])[0]
    
    # Print the predicted personality name for the test image
    print(f"The predicted personality for the image is: {personality}")

# Testing the image
test_image("/Users/nanditabhutada/Downloads/SPID/test_images/maria_sharapova26.png")
